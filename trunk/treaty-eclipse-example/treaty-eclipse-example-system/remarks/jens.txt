
// checked handlers, see class org.eclipse.ui.internal.handlers.HandlerPersistence
	if (!checkClass(configurationElement, warningsToLog,"Handlers need a class", commandId)) { //$NON-NLS-1$
				continue;
			}
			
i.e. handler is not added to handler activations
			
checkClass is implemented in org.eclipse.ui.internal.services.RegistryPersistence, from comment:

"Checks that the class attribute or element exists for this element. This is used for executable extensions that are being read in.
@param configurationElement - 
 The configuration element which should contain a class
attribute or a class child element; must not be
\<code>null</code>.
This seems to indicate that one of them must exist!!

Usually, when loading classes, the org.eclipse.core.runtime.IConfigurationElement#createExecutableExtension
method is involved. This requires that the class must have an empty public constructor


-----------------------------------

interesting case that some class names (e.g. in handlers) have the following syntax:
class_name:boolean

This syntax is not documented (in extension point descriptions or interface descriptions)
The contract is hidden in INTERNAL implementation classes, like in 
org.eclipse.core.internal.registry.ConfigurationElement#createExecutableExtension
- this will chop off the :postfix and /postfix
one could argue that by using createExecutableExtension (instead of manually using 
Class.forName().newInstance() takes care of this, however, this is not documented either (at least we don't think so)


